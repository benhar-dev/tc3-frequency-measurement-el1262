<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="MAIN" Id="{735025e4-61c2-449d-81e1-3832bb0f4520}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM MAIN
VAR

	el1262_ChannelInput AT %I*:ARRAY[0..OVERSAMPLE_BYTE_COUNT] OF BYTE;
	el1262_CycleCount AT %I*:WORD;
	
	initialised : BOOL;
	getTaskIndex : GETCURTASKINDEX;
	currentTaskIndex : BYTE;
	taskCycleTimeInNanoseconds : DWORD;
	taskName : STRING(255);

	cycleCountIndex : UDINT;
	cycleCountHistory : ARRAY[0..MAX_CC_HISTORY] OF WORD;
	lostOrRepeatedFrameCount : UDINT;
	lastCycleCount : WORD;
	
	byteIndex : UDINT;
	bitIndex : UDINT;
	previousBitValue : BOOL;
	currentBitValue : BOOL;
	risingEdgesFound : UDINT;

	frequencyHistory : ARRAY[0..CYCLES_TO_CALCULATE_AVERAGE] OF REAL;
	frequencyHistoryIndex : UDINT;
	
	// Results
	currentFrequencyInHz : REAL; 
	averageFrequencyInHz : REAL;
	
END_VAR
VAR CONSTANT
	
	OVERSAMPLE_BYTE_COUNT : UDINT := 124;(*start with 0, based on Operation Mode = "1 Channel Bytes" and Oversample Factor = "1000 (8 * 125)" *)
	MAX_CC_HISTORY : UDINT := 100;
	CYCLES_TO_CALCULATE_AVERAGE : UDINT := 999;	(* +1 is calculated*)
	
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[// get task time and name on PLC start
IF NOT initialised THEN
	getTaskIndex(index=>currentTaskIndex );
	taskCycleTimeInNanoseconds := (_TaskInfo[currentTaskIndex].cycleTime * 100);			(*in ns*)
	taskName := _TaskInfo[currentTaskIndex].taskName ;
	initialised := TRUE;	
END_IF;

// Check for lost or repeated frames by CycleCounter
cycleCountHistory[cycleCountIndex] := el1262_CycleCount;

IF NOT (el1262_CycleCount - lastCycleCount = 1) THEN
	lostOrRepeatedFrameCount := lostOrRepeatedFrameCount + 1;
END_IF

lastCycleCount := el1262_CycleCount;
cycleCountIndex := SEL((cycleCountIndex = MAX_CC_HISTORY), cycleCountIndex + 1, 0);

//Count rising edges on channel
risingEdgesFound := 0;
FOR byteIndex := 0 TO OVERSAMPLE_BYTE_COUNT BY 1 DO
	FOR bitIndex := 0 TO 7 BY 1 DO
		CASE bitIndex OF
		0:	currentBitValue := el1262_ChannelInput[byteIndex].0;
		1:	currentBitValue := el1262_ChannelInput[byteIndex].1;
		2:	currentBitValue := el1262_ChannelInput[byteIndex].2;
		3:	currentBitValue := el1262_ChannelInput[byteIndex].3;
		4:	currentBitValue := el1262_ChannelInput[byteIndex].4;
		5:	currentBitValue := el1262_ChannelInput[byteIndex].5;
		6:	currentBitValue := el1262_ChannelInput[byteIndex].6;
		7:	currentBitValue := el1262_ChannelInput[byteIndex].7;
		END_CASE
		IF NOT previousBitValue AND currentBitValue THEN
			risingEdgesFound := risingEdgesFound + 1;
		END_IF
		previousBitValue := currentBitValue;
	END_FOR
END_FOR

//calculate input frequency, averange over CYCLES_TO_CALCULATE_AVERAGE cycles

currentFrequencyInHz := UDINT_TO_REAL(risingEdgesFound) / (DWORD_TO_REAL(taskCycleTimeInNanoseconds) / 1000000000.0);

frequencyHistory[frequencyHistoryIndex] := currentFrequencyInHz;
frequencyHistoryIndex := SEL( (frequencyHistoryIndex = CYCLES_TO_CALCULATE_AVERAGE ), frequencyHistoryIndex + 1, 0);

IF (frequencyHistoryIndex = 0) THEN
	averageFrequencyInHz := 0;
	
	FOR frequencyHistoryIndex := 0 TO CYCLES_TO_CALCULATE_AVERAGE BY 1 DO
		averageFrequencyInHz := averageFrequencyInHz + frequencyHistory[frequencyHistoryIndex];
	END_FOR
	
	averageFrequencyInHz := averageFrequencyInHz / (CYCLES_TO_CALCULATE_AVERAGE + 1);
	frequencyHistoryIndex := 0;
END_IF]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>